from fastapi import FastAPI, Request, BackgroundTasks
from fastapi.responses import JSONResponse
import uvicorn
import hmac, hashlib, os, json, requests, pickle, faiss
import numpy as np
from dotenv import load_dotenv
load_dotenv()

# ============ ENV ============
LINE_CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
openapi_key = os.getenv("OPENAI_API_KEY")

# ============ LOAD DB ============
index = faiss.read_index("database/index.index")
with open("database/id2text.pkl", "rb") as f:
    id2text = pickle.load(f)
with open("database/id2meta.pkl", "rb") as f:
    id2meta = pickle.load(f)

# ============ EMBEDDER ============
from sentence_transformers import SentenceTransformer
embedder = SentenceTransformer("intfloat/multilingual-e5-base")

# ============ LangChain ============
from langchain.chat_models import ChatOpenAI
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import JsonOutputParser

parser = JsonOutputParser()

prompt_template = PromptTemplate.from_template(
    """‡∏´‡∏ô‡∏π‡∏ä‡∏∑‡πà‡∏≠ '‡∏ô‡πâ‡∏≠‡∏á‡∏ô‡∏¥‡∏ß‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå ü§ñ‚ò¢Ô∏è' ‡∏´‡∏ô‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ß‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ô‡∏¥‡∏ß‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå ‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏π‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ß‡∏ä‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ô‡∏¥‡∏ß‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á

[‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á]
{context}

[‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ]
{question}

[‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö]
- ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡∏π‡∏ï‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å [‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á] ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏†‡∏≤‡∏û
- ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô [‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á] ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡∏π‡∏ï‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞ ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞üôèüèªüò≠"
- ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ(‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≤‡∏£‡∏ó‡∏∏‡∏Å‡∏Ç‡πå‡∏™‡∏∏‡∏Å‡∏î‡∏¥‡∏ö) (‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì ‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏•‡πà‡∏ô‡∏ù‡∏ù) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡∏´‡∏ô‡∏π‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å
- ‡∏´‡∏ô‡∏π‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å [‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á] ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ß‡πâ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô
- ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ß‡πà‡∏≤ "‡∏´‡∏ô‡∏π" ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡∏™‡∏∏‡∏†‡∏≤‡∏û‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ '‡∏ô‡∏∞‡∏Ñ‡∏∞' ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ñ‡πà‡∏∞' ‡πÅ‡∏•‡∏∞‡πÉ‡πâ‡∏ä‡πâ emoji ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÑ‡∏î‡πâ

[‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö]
‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô:
{{
  "answer": "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà"
}}

**‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:** ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡∏≠‡∏Å‡πÄ‡∏´‡∏ô‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡∏Ñ‡πà‡∏∞
"""
)


llm = ChatOpenAI(
    model_name="gpt-4o-mini",
    temperature=0.0,
    max_tokens=512,
    openai_api_key=openapi_key
)

chain = prompt_template | llm | parser

def rag_pipeline(user_query: str, embedder, index, id2text, top_k=3):
    query_embed = embedder.encode([user_query])
    D, I = index.search(np.array(query_embed, dtype=np.float32), top_k)
    top_chunks = [id2text[i] for i in I[0]]
    context = "\n\n".join(top_chunks)
    inputs = {"context": context, "question": user_query}
    result = chain.invoke(inputs)
    return result["answer"], context, top_chunks

# ============ FASTAPI ============
app = FastAPI()

@app.post("/webhook")
async def line_webhook(request: Request, background_tasks: BackgroundTasks):
    body = await request.body()
    body_json = json.loads(body.decode("utf-8"))
    events = body_json.get("events", [])
    for event in events:
        if event["type"] == "message" and event["message"]["type"] == "text":
            user_query = event["message"]["text"]
            user_id = event["source"]["userId"]
            # ‡∏ó‡∏≥‡πÉ‡∏ô background ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà timeout!
            background_tasks.add_task(handle_user_message, user_query, user_id)
    return JSONResponse(content={"status": "ok"})



def handle_user_message(user_query, user_id):
    try:
        # 1. ‡∏™‡πà‡∏á effect ‡∏Å‡πà‡∏≠‡∏ô (‡πÅ‡∏à‡πâ‡∏á user ‡∏ß‡πà‡∏≤‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞)
        send_line_message(user_id, '‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞ü•∫ ‡∏´‡∏ô‡∏π‡∏Ç‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏¥‡∏î‡πÅ‡∏õ‡πä‡∏ö‡∏ô‡∏∂‡∏á... üß†üí≠‚è≥')
        
        # 2. ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á
        answer, context, chunks = rag_pipeline(user_query, embedder, index, id2text)
        
        # 3. ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ
        send_line_message(user_id, answer)
    except Exception as e:
        print("ERROR:", e)
        send_line_message(user_id, "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà")


def send_line_message(user_id, text):
    url = "https://api.line.me/v2/bot/message/push"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_CHANNEL_ACCESS_TOKEN}",
    }
    data = {
        "to": user_id,
        "messages": [{"type": "text", "text": text}],
    }
    resp = requests.post(url, headers=headers, json=data)
    print("LINE response:", resp.status_code, resp.text)

# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ó‡∏™ GET (optional)
@app.get("/webhook")
async def check_webhook():
    return {"status": "webhook is alive"}

# ============ START ============
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
